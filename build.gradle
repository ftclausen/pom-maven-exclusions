/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.4/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Allow publishing via Maven
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

group = 'example'
version = '1.0-SNAPSHOT'

configurations {
  freddieTest
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'

    freddieTest 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
}

configurations.all {
  exclude group: 'com.example', module: 'module1'
}

publishing {
  publications {
    derfPub( MavenPublication ) {
      from components.java

      project.afterEvaluate {
        if (project.hasProperty('useMapToMavenScope')) {
          mapToMavenScope( 'freddieTest', 'test' )
        } else {
          addDependenciesToPom(pom, 'freddieTest', 'test')
        }
      }
    }
  }
}

application {
    // Define the main class for the application
    mainClassName = 'maven.pom.exclusions.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

ext.addDependenciesToPom = { pom, configuration, scope ->
  println "DEBUG: Processing configuration ${configurations[configuration].name}"
  pom.withXml {
    configurations[configuration].allDependencies.each { dependency ->

      asNode().dependencies[0].appendNode( 'dependency' ).with { details ->
        details.appendNode( 'groupId', dependency.group )
        details.appendNode( 'artifactId', dependency.name )
        details.appendNode( 'version', dependency.version )
        details.appendNode( 'scope', scope )

        if ( dependency.excludeRules ) {
          details.appendNode( 'exclusions' ).with { topLevelExclusions ->
            dependency.excludeRules.each { excludedItemFromGradle ->
              topLevelExclusions.appendNode( 'exclusion' ).with { excludedItemToPom ->
                excludedItemToPom.appendNode( 'artifactId', excludedItemFromGradle.module )
                excludedItemToPom.appendNode( 'groupId', excludedItemFromGradle.group )
              }
            }
          }
        } else {
          println "DEBUG: No exclusions for $dependency.name"
        }
      }
    }
  }
}


ext.mapToMavenScope = { configuration, scope ->
  Configuration config = project.getConfigurations(  ).getByName( configuration )

  SoftwareComponent component = project.getComponents().getByName('java')
  ((AdhocComponentWithVariants) component).addVariantsFromConfiguration(config) {
    it.mapToMavenScope( scope )
  }
}
